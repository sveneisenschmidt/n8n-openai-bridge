FROM node:20-alpine

# Build arguments for image metadata
ARG VERSION=unknown
ARG BUILD_DATE=unknown
ARG VCS_REF=unknown
ARG DESCRIPTION="OpenAI-compatible API bridge for n8n workflows"

# OCI standard labels
LABEL org.opencontainers.image.title="n8n-openai-bridge"
LABEL org.opencontainers.image.description="${DESCRIPTION}"
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.created="${BUILD_DATE}"
LABEL org.opencontainers.image.revision="${VCS_REF}"
LABEL org.opencontainers.image.source="https://github.com/sveneisenschmidt/n8n-openai-bridge"
LABEL org.opencontainers.image.url="https://github.com/sveneisenschmidt/n8n-openai-bridge"
LABEL org.opencontainers.image.documentation="https://github.com/sveneisenschmidt/n8n-openai-bridge#readme"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.vendor="Sven Eisenschmidt"

# Set production environment
ENV NODE_ENV=production

WORKDIR /app

# Copy package files first (for better caching)
COPY package*.json ./

# Install dependencies with optimizations
# Using build cache mount for npm cache
RUN --mount=type=cache,target=/root/.npm \
    npm install --omit=dev --prefer-offline --no-audit --no-fund

# Copy application files
COPY src/ ./src/

# Copy default configuration files for Docker
# These will be used if no external configs are mounted
COPY docker/.env ./.env
COPY docker/models.json ./models.json

# Set correct ownership and permissions for node user
RUN chown -R node:node /app && \
    chmod -R u+rw,go+r /app && \
    chmod +x /app/src/server.js

# Switch to non-root user for security
USER node

# Expose port
EXPOSE 3333

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3333/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Start server
CMD ["node", "src/server.js"]
