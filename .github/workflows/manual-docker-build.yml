name: Manual Docker Build

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v0.0.7)'
        required: true
        type: string
      push_latest:
        description: 'Also push as latest tag'
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version_tag }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          TAG="${{ inputs.version_tag }}"
          VERSION=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $VERSION | cut -d. -f1,2)" >> $GITHUB_OUTPUT

          # Determine tags to push
          TAGS="ghcr.io/${{ github.repository_owner }}/n8n-openai-bridge:$VERSION"
          TAGS="$TAGS
          ghcr.io/${{ github.repository_owner }}/n8n-openai-bridge:$(echo $VERSION | cut -d. -f1,2)"
          TAGS="$TAGS
          ghcr.io/${{ github.repository_owner }}/n8n-openai-bridge:$(echo $VERSION | cut -d. -f1)"

          if [[ "${{ inputs.push_latest }}" == "true" ]]; then
            TAGS="ghcr.io/${{ github.repository_owner }}/n8n-openai-bridge:latest
          $TAGS"
          fi

          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.build
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.version.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "Docker images published for ${{ inputs.version_tag }}:"
          echo ""
          echo "${{ steps.version.outputs.tags }}" | while IFS= read -r tag; do
            echo "âœ“ $tag"
          done
          echo ""
          if [[ "${{ inputs.push_latest }}" == "true" ]]; then
            echo "Latest tag included"
          else
            echo "Pre-release (no latest tag)"
          fi
